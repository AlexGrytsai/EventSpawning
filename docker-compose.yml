services:
  publisher:
    image: andriiuni/events
    restart: always
    environment:
      - EVENT_ENDPOINT=${EVENT_ENDPOINT}
    depends_on:
      gateway:
        condition: service_healthy
      fb-collector:
        condition: service_healthy
      ttk-collector:
        condition: service_healthy
      reporter:
        condition: service_healthy
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
      prometheus:
        condition: service_started
      grafana:
        condition: service_started
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:3000/health/live && curl -f http://localhost:3000/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  gateway:
    build:
      context: .
      dockerfile: src/infrastructure/docker/gateway.Dockerfile
    environment:
      - EVENT_ENDPOINT=${EVENT_ENDPOINT}
      - NATS_URL=${NATS_URL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DATABASE_URL=${DATABASE_URL}
    ports:
      - 3000:3000
    restart: always
    command: sh -c "npx prisma migrate deploy && npx prisma generate && node dist/main.js"
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:3000/health/live && curl -f http://localhost:3000/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - gatewaydata:/data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    ulimits:
      nproc: 1024
      nofile:
        soft: 4096
        hard: 4096

  fb-collector:
    build:
      context: .
      dockerfile: src/infrastructure/docker/fb-collector.Dockerfile
    environment:
      - EVENT_ENDPOINT=${EVENT_ENDPOINT}
      - NATS_URL=${NATS_URL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DATABASE_URL=${DATABASE_URL}
    restart: always
    ports:
      - 3001:3001
    command: sh -c "npx prisma migrate deploy && npx prisma generate && node dist/main.js"
    depends_on:
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:3001/health/live && curl -f http://localhost:3001/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    ulimits:
      nproc: 1024
      nofile:
        soft: 4096
        hard: 4096

  ttk-collector:
    build:
      context: .
      dockerfile: src/infrastructure/docker/ttk-collector.Dockerfile
    environment:
      - EVENT_ENDPOINT=${EVENT_ENDPOINT}
      - NATS_URL=${NATS_URL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DATABASE_URL=${DATABASE_URL}
    restart: always
    ports:
      - 3002:3002
    depends_on:
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: sh -c "npx prisma migrate deploy && npx prisma generate && node dist/main.js"
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:3002/health/live && curl -f http://localhost:3002/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    ulimits:
      nproc: 1024
      nofile:
        soft: 4096
        hard: 4096

  reporter:
    build:
      context: .
      dockerfile: src/infrastructure/docker/reporter.Dockerfile
    environment:
      - EVENT_ENDPOINT=${EVENT_ENDPOINT}
      - NATS_URL=${NATS_URL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DATABASE_URL=${DATABASE_URL}
    command: sh -c "npx prisma migrate deploy && npx prisma generate && node dist/main.js"
    restart: always
    ports:
      - 4000:4000
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:4000/health/live && curl -f http://localhost:4000/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    ulimits:
      nproc: 1024
      nofile:
        soft: 4096
        hard: 4096

  postgres:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    ulimits:
      nproc: 2048
      nofile:
        soft: 8192
        hard: 8192

  nats:
    image: nats:latest
    command: [ "-js" ]
    restart: always
    ports:
      - 4222:4222
      - 8222:8222
    volumes:
      - natsdata:/data
    healthcheck:
      test: ["CMD", "nats-server", "--signal=healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    ulimits:
      nproc: 1024
      nofile:
        soft: 4096
        hard: 4096

  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusdata:/prometheus
    ports:
      - 9090:9090
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    ulimits:
      nproc: 1024
      nofile:
        soft: 4096
        hard: 4096

  grafana:
    image: grafana/grafana:latest
    restart: always
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafanadata:/var/lib/grafana
    ports:
      - 3005:3000
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    ulimits:
      nproc: 1024
      nofile:
        soft: 4096
        hard: 4096

volumes:
  gatewaydata:
  pgdata:
  natsdata:
  prometheusdata:
  grafanadata: